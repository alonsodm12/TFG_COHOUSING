name: CI/CD Spring CO-HOUSING Microservicios

on:
  push:
    branches:
      - ci-cd

jobs:
  build:
    runs-on: ubuntu-latest

    environment: TFG-COHOUSING

    services:
      docker:
        image: docker:20.10.7
        options: --privileged

    steps:
    # Paso 1: Clonar el repositorio
    - name: Checkout repository
      uses: actions/checkout@v3

    # Paso 2: Configurar JDK (Java 17)
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: 17

    # Paso 3: Configurar Maven Cache (opcional, pero acelera las builds)
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    # Paso 4: Compilar la aplicación y ejecutar pruebas por microservicio
    - name: Build and Test all services
      run: |
        # Ejecutar pruebas para cada microservicio y generar reporte de cobertura
        cd ./microservicios/GestionUsuarios/demo  # Cambia 'demo' por el nombre de tu microservicio
        mvn clean package jacoco:prepare-agent test jacoco:report

        # Si tienes más microservicios, repite el proceso para cada uno
        #cd ../otro-servicio/  # Reemplaza 'otro-servicio' por el nombre del siguiente microservicio
        #./mvnw clean package jacoco:prepare-agent test jacoco:report


    - name: Verificar el contenido de target
    run: ls -lah microservicios/GestionUsuarios/demo/target

    # Paso 5: Construir y subir la imagen Docker para cada microservicio
    - name: Build and Push Docker Image for each microservice
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        # Construir y subir Docker para el microservicio demo
        cd microservicios/GestionUsuarios/demo  # Reemplaza 'demo' por el nombre del microservicio
        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        docker build -t $DOCKER_USERNAME/spring-cohousing-demo:0.0.1-SNAPSHOT .
        docker push $DOCKER_USERNAME/spring-cohousing-demo:0.0.1-SNAPSHOT

        # Si tienes otros microservicios, repite el proceso para cada uno
        # cd ./services/otro-servicio/
        # docker build -t $DOCKER_USERNAME/spring-cohousing-otro-servicio:0.0.1-SNAPSHOT .
        # docker push $DOCKER_USERNAME/spring-cohousing-otro-servicio:0.0.1-SNAPSHOT

    # Paso 6: Subir cobertura de código a Codecov para cada microservicio
    - name: Upload Coverage to Codecov
      run: |
        # Subir cobertura de Codecov para el microservicio demo
        bash <(curl -s https://codecov.io/bash) -f services/demo/target/site/jacoco/jacoco.xml
        # Reemplaza 'demo' con el nombre del microservicio si tienes varios
        # Si tienes más microservicios, repite este paso para cada uno
        bash <(curl -s https://codecov.io/bash) -f services/otro-servicio/target/site/jacoco/jacoco.xml

      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    # Paso 7: Subir la documentación generada como un commit al PR
    - name: Generate Swagger Docs
      run: mvn springdoc-openapi:generate

    # Paso 8: Copy Swagger JSON to docs folder
    - name: Copy Swagger JSON to docs folder
      run: |
        mkdir -p docs
        cp target/openapi.json docs/swagger.json
